
FrequencyandDutycyclemeasurementofPulsesignal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00804000  00000d5e  00000df2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  0080403c  0080403c  00000e2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a3b  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038ab  00000000  00000000  00006b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001422  00000000  00000000  0000a42e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  0000b850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030b3  00000000  00000000  0000bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000739  00000000  00000000  0000ed7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000f4b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  10:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_4>
  14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  78:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_30>
  7c:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_31>
  80:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_32>
  84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  90:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  ac:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  b8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  bc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  c8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  cc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  d8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  dc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  e8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_copy_data>:
  f8:	10 e4       	ldi	r17, 0x40	; 64
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e4       	ldi	r27, 0x40	; 64
  fe:	ee e5       	ldi	r30, 0x5E	; 94
 100:	fd e0       	ldi	r31, 0x0D	; 13
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	ac 33       	cpi	r26, 0x3C	; 60
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	20 e4       	ldi	r18, 0x40	; 64
 114:	ac e3       	ldi	r26, 0x3C	; 60
 116:	b0 e4       	ldi	r27, 0x40	; 64
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	a6 3b       	cpi	r26, 0xB6	; 182
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
 122:	0e 94 14 02 	call	0x428	; 0x428 <main>
 126:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_exit>

0000012a <__bad_interrupt>:
 12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <SendString>:
   none
  @Description
  function to transmit a data on terminal window
  **/
void SendString(const char *data)
{
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	fc 01       	movw	r30, r24
	uint8_t i = 0;
	for (i = 0; data[i] != '\0'; i++) {
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	59 f0       	breq	.+22     	; 0x152 <SendString+0x24>
 13c:	8f 01       	movw	r16, r30
 13e:	c0 e0       	ldi	r28, 0x00	; 0
		// sending the data through EUSART2 peripheral
		USART_0_write(data[i]);
 140:	0e 94 52 03 	call	0x6a4	; 0x6a4 <USART_0_write>
  function to transmit a data on terminal window
  **/
void SendString(const char *data)
{
	uint8_t i = 0;
	for (i = 0; data[i] != '\0'; i++) {
 144:	cf 5f       	subi	r28, 0xFF	; 255
 146:	f8 01       	movw	r30, r16
 148:	ec 0f       	add	r30, r28
 14a:	f1 1d       	adc	r31, r1
 14c:	80 81       	ld	r24, Z
 14e:	81 11       	cpse	r24, r1
 150:	f7 cf       	rjmp	.-18     	; 0x140 <SendString+0x12>
		// sending the data through EUSART2 peripheral
		USART_0_write(data[i]);
	}
}
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <FrequencyAndDutycycleMeasurement>:
   none
  @Description
  This function measures Frequency and Duty cycle of the input signal given by signal measurement
  **/
void FrequencyAndDutycycleMeasurement(void)
{
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
	uint8_t decValue = 0;

	if (samplescount == MAXSAMPLES_COUNT) {
 166:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <samplescount>
 16a:	8a 30       	cpi	r24, 0x0A	; 10
 16c:	09 f0       	breq	.+2      	; 0x170 <FrequencyAndDutycycleMeasurement+0x16>
 16e:	97 c0       	rjmp	.+302    	; 0x29e <__EEPROM_REGION_LENGTH__+0x9e>
		// Sum of period and pulse width samples value of input signal
		// is copied to perioAfterCapture and pulseWidthAfterCature variable
		periodAfterCapture     = periodSum;
 170:	80 91 48 40 	lds	r24, 0x4048	; 0x804048 <periodSum>
 174:	90 91 49 40 	lds	r25, 0x4049	; 0x804049 <periodSum+0x1>
 178:	a0 91 4a 40 	lds	r26, 0x404A	; 0x80404a <periodSum+0x2>
 17c:	b0 91 4b 40 	lds	r27, 0x404B	; 0x80404b <periodSum+0x3>
 180:	80 93 58 40 	sts	0x4058, r24	; 0x804058 <periodAfterCapture>
 184:	90 93 59 40 	sts	0x4059, r25	; 0x804059 <periodAfterCapture+0x1>
 188:	a0 93 5a 40 	sts	0x405A, r26	; 0x80405a <periodAfterCapture+0x2>
 18c:	b0 93 5b 40 	sts	0x405B, r27	; 0x80405b <periodAfterCapture+0x3>
		pulseWidthAfterCapture = pulseWidthSum;
 190:	80 91 44 40 	lds	r24, 0x4044	; 0x804044 <pulseWidthSum>
 194:	90 91 45 40 	lds	r25, 0x4045	; 0x804045 <pulseWidthSum+0x1>
 198:	a0 91 46 40 	lds	r26, 0x4046	; 0x804046 <pulseWidthSum+0x2>
 19c:	b0 91 47 40 	lds	r27, 0x4047	; 0x804047 <pulseWidthSum+0x3>
 1a0:	80 93 54 40 	sts	0x4054, r24	; 0x804054 <pulseWidthAfterCapture>
 1a4:	90 93 55 40 	sts	0x4055, r25	; 0x804055 <pulseWidthAfterCapture+0x1>
 1a8:	a0 93 56 40 	sts	0x4056, r26	; 0x804056 <pulseWidthAfterCapture+0x2>
 1ac:	b0 93 57 40 	sts	0x4057, r27	; 0x804057 <pulseWidthAfterCapture+0x3>

		// Averaging of the samples
		periodAfterCaptureAvg     = (periodAfterCapture / MAXSAMPLES_COUNT);
 1b0:	60 91 58 40 	lds	r22, 0x4058	; 0x804058 <periodAfterCapture>
 1b4:	70 91 59 40 	lds	r23, 0x4059	; 0x804059 <periodAfterCapture+0x1>
 1b8:	80 91 5a 40 	lds	r24, 0x405A	; 0x80405a <periodAfterCapture+0x2>
 1bc:	90 91 5b 40 	lds	r25, 0x405B	; 0x80405b <periodAfterCapture+0x3>
 1c0:	0f 2e       	mov	r0, r31
 1c2:	fa e0       	ldi	r31, 0x0A	; 10
 1c4:	cf 2e       	mov	r12, r31
 1c6:	d1 2c       	mov	r13, r1
 1c8:	e1 2c       	mov	r14, r1
 1ca:	f1 2c       	mov	r15, r1
 1cc:	f0 2d       	mov	r31, r0
 1ce:	a7 01       	movw	r20, r14
 1d0:	96 01       	movw	r18, r12
 1d2:	0e 94 94 03 	call	0x728	; 0x728 <__udivmodsi4>
 1d6:	20 93 50 40 	sts	0x4050, r18	; 0x804050 <periodAfterCaptureAvg>
 1da:	30 93 51 40 	sts	0x4051, r19	; 0x804051 <periodAfterCaptureAvg+0x1>
 1de:	40 93 52 40 	sts	0x4052, r20	; 0x804052 <periodAfterCaptureAvg+0x2>
 1e2:	50 93 53 40 	sts	0x4053, r21	; 0x804053 <periodAfterCaptureAvg+0x3>
		pulseWidthAfterCaptureAvg = (pulseWidthAfterCapture / MAXSAMPLES_COUNT);
 1e6:	60 91 54 40 	lds	r22, 0x4054	; 0x804054 <pulseWidthAfterCapture>
 1ea:	70 91 55 40 	lds	r23, 0x4055	; 0x804055 <pulseWidthAfterCapture+0x1>
 1ee:	80 91 56 40 	lds	r24, 0x4056	; 0x804056 <pulseWidthAfterCapture+0x2>
 1f2:	90 91 57 40 	lds	r25, 0x4057	; 0x804057 <pulseWidthAfterCapture+0x3>
 1f6:	a7 01       	movw	r20, r14
 1f8:	96 01       	movw	r18, r12
 1fa:	0e 94 94 03 	call	0x728	; 0x728 <__udivmodsi4>
 1fe:	20 93 4c 40 	sts	0x404C, r18	; 0x80404c <pulseWidthAfterCaptureAvg>
 202:	30 93 4d 40 	sts	0x404D, r19	; 0x80404d <pulseWidthAfterCaptureAvg+0x1>
 206:	40 93 4e 40 	sts	0x404E, r20	; 0x80404e <pulseWidthAfterCaptureAvg+0x2>
 20a:	50 93 4f 40 	sts	0x404F, r21	; 0x80404f <pulseWidthAfterCaptureAvg+0x3>

		// Using formula to calculate the Frequency and Duty cycle of the signal
		captureDuty      = ((pulseWidthAfterCaptureAvg * 100L) / periodAfterCaptureAvg);
 20e:	20 91 4c 40 	lds	r18, 0x404C	; 0x80404c <pulseWidthAfterCaptureAvg>
 212:	30 91 4d 40 	lds	r19, 0x404D	; 0x80404d <pulseWidthAfterCaptureAvg+0x1>
 216:	40 91 4e 40 	lds	r20, 0x404E	; 0x80404e <pulseWidthAfterCaptureAvg+0x2>
 21a:	50 91 4f 40 	lds	r21, 0x404F	; 0x80404f <pulseWidthAfterCaptureAvg+0x3>
 21e:	c0 90 50 40 	lds	r12, 0x4050	; 0x804050 <periodAfterCaptureAvg>
 222:	d0 90 51 40 	lds	r13, 0x4051	; 0x804051 <periodAfterCaptureAvg+0x1>
 226:	e0 90 52 40 	lds	r14, 0x4052	; 0x804052 <periodAfterCaptureAvg+0x2>
 22a:	f0 90 53 40 	lds	r15, 0x4053	; 0x804053 <periodAfterCaptureAvg+0x3>
 22e:	a4 e6       	ldi	r26, 0x64	; 100
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	0e 94 b6 03 	call	0x76c	; 0x76c <__muluhisi3>
 236:	a7 01       	movw	r20, r14
 238:	96 01       	movw	r18, r12
 23a:	0e 94 94 03 	call	0x728	; 0x728 <__udivmodsi4>
 23e:	20 93 40 40 	sts	0x4040, r18	; 0x804040 <captureDuty>
 242:	30 93 41 40 	sts	0x4041, r19	; 0x804041 <captureDuty+0x1>
 246:	40 93 42 40 	sts	0x4042, r20	; 0x804042 <captureDuty+0x2>
 24a:	50 93 43 40 	sts	0x4043, r21	; 0x804043 <captureDuty+0x3>
		captureFrequency = (F_CPU / periodAfterCaptureAvg);
 24e:	20 91 50 40 	lds	r18, 0x4050	; 0x804050 <periodAfterCaptureAvg>
 252:	30 91 51 40 	lds	r19, 0x4051	; 0x804051 <periodAfterCaptureAvg+0x1>
 256:	40 91 52 40 	lds	r20, 0x4052	; 0x804052 <periodAfterCaptureAvg+0x2>
 25a:	50 91 53 40 	lds	r21, 0x4053	; 0x804053 <periodAfterCaptureAvg+0x3>
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	76 e3       	ldi	r23, 0x36	; 54
 262:	8e e6       	ldi	r24, 0x6E	; 110
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 94 03 	call	0x728	; 0x728 <__udivmodsi4>
 26a:	20 93 3c 40 	sts	0x403C, r18	; 0x80403c <__data_end>
 26e:	30 93 3d 40 	sts	0x403D, r19	; 0x80403d <__data_end+0x1>
 272:	40 93 3e 40 	sts	0x403E, r20	; 0x80403e <__data_end+0x2>
 276:	50 93 3f 40 	sts	0x403F, r21	; 0x80403f <__data_end+0x3>

		periodSum     = 0;
 27a:	10 92 48 40 	sts	0x4048, r1	; 0x804048 <periodSum>
 27e:	10 92 49 40 	sts	0x4049, r1	; 0x804049 <periodSum+0x1>
 282:	10 92 4a 40 	sts	0x404A, r1	; 0x80404a <periodSum+0x2>
 286:	10 92 4b 40 	sts	0x404B, r1	; 0x80404b <periodSum+0x3>
		pulseWidthSum = 0;
 28a:	10 92 44 40 	sts	0x4044, r1	; 0x804044 <pulseWidthSum>
 28e:	10 92 45 40 	sts	0x4045, r1	; 0x804045 <pulseWidthSum+0x1>
 292:	10 92 46 40 	sts	0x4046, r1	; 0x804046 <pulseWidthSum+0x2>
 296:	10 92 47 40 	sts	0x4047, r1	; 0x804047 <pulseWidthSum+0x3>
		samplescount  = 0;
 29a:	10 92 5c 40 	sts	0x405C, r1	; 0x80405c <samplescount>
	}

	// If condition is executed for every one second of the RTC interrupt
	if (rtcFlag == 1) {
 29e:	80 91 af 40 	lds	r24, 0x40AF	; 0x8040af <rtcFlag>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 2a6:	4d c0       	rjmp	.+154    	; 0x342 <__EEPROM_REGION_LENGTH__+0x142>
		decValue = (captureDuty % MAXSAMPLES_COUNT);
 2a8:	60 91 40 40 	lds	r22, 0x4040	; 0x804040 <captureDuty>
 2ac:	70 91 41 40 	lds	r23, 0x4041	; 0x804041 <captureDuty+0x1>
 2b0:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <captureDuty+0x2>
 2b4:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <captureDuty+0x3>
		// Prints measured Frequency and Duty cycle of the signal on terminal window.
		sprintf(buffer, "Duty cycle=%lu.%d%% \r\nFrequency=%luHz\r\n\n", captureDuty, decValue, captureFrequency);
 2b8:	00 91 3c 40 	lds	r16, 0x403C	; 0x80403c <__data_end>
 2bc:	10 91 3d 40 	lds	r17, 0x403D	; 0x80403d <__data_end+0x1>
 2c0:	20 91 3e 40 	lds	r18, 0x403E	; 0x80403e <__data_end+0x2>
 2c4:	30 91 3f 40 	lds	r19, 0x403F	; 0x80403f <__data_end+0x3>
 2c8:	c0 90 40 40 	lds	r12, 0x4040	; 0x804040 <captureDuty>
 2cc:	d0 90 41 40 	lds	r13, 0x4041	; 0x804041 <captureDuty+0x1>
 2d0:	e0 90 42 40 	lds	r14, 0x4042	; 0x804042 <captureDuty+0x2>
 2d4:	f0 90 43 40 	lds	r15, 0x4043	; 0x804043 <captureDuty+0x3>
 2d8:	3f 93       	push	r19
 2da:	2f 93       	push	r18
 2dc:	1f 93       	push	r17
 2de:	0f 93       	push	r16
 2e0:	2a e0       	ldi	r18, 0x0A	; 10
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	0e 94 94 03 	call	0x728	; 0x728 <__udivmodsi4>
 2ec:	1f 92       	push	r1
 2ee:	6f 93       	push	r22
 2f0:	ff 92       	push	r15
 2f2:	ef 92       	push	r14
 2f4:	df 92       	push	r13
 2f6:	cf 92       	push	r12
 2f8:	82 e1       	ldi	r24, 0x12	; 18
 2fa:	90 e4       	ldi	r25, 0x40	; 64
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	83 e7       	ldi	r24, 0x73	; 115
 302:	90 e4       	ldi	r25, 0x40	; 64
 304:	9f 93       	push	r25
 306:	8f 93       	push	r24
 308:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <sprintf>
		SendString(buffer);
 30c:	83 e7       	ldi	r24, 0x73	; 115
 30e:	90 e4       	ldi	r25, 0x40	; 64
 310:	0e 94 97 00 	call	0x12e	; 0x12e <SendString>
		rtcFlag          = 0;
 314:	10 92 af 40 	sts	0x40AF, r1	; 0x8040af <rtcFlag>
		captureDuty      = 0;
 318:	10 92 40 40 	sts	0x4040, r1	; 0x804040 <captureDuty>
 31c:	10 92 41 40 	sts	0x4041, r1	; 0x804041 <captureDuty+0x1>
 320:	10 92 42 40 	sts	0x4042, r1	; 0x804042 <captureDuty+0x2>
 324:	10 92 43 40 	sts	0x4043, r1	; 0x804043 <captureDuty+0x3>
		captureFrequency = 0;
 328:	10 92 3c 40 	sts	0x403C, r1	; 0x80403c <__data_end>
 32c:	10 92 3d 40 	sts	0x403D, r1	; 0x80403d <__data_end+0x1>
 330:	10 92 3e 40 	sts	0x403E, r1	; 0x80403e <__data_end+0x2>
 334:	10 92 3f 40 	sts	0x403F, r1	; 0x80403f <__data_end+0x3>
 338:	8d b7       	in	r24, 0x3d	; 61
 33a:	9e b7       	in	r25, 0x3e	; 62
 33c:	0e 96       	adiw	r24, 0x0e	; 14
 33e:	8d bf       	out	0x3d, r24	; 61
 340:	9e bf       	out	0x3e, r25	; 62
	}
}
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	08 95       	ret

00000350 <__vector_4>:

    For every one second RTC interrupt is generated
 * **********************************************************
 **/
ISR(RTC_PIT_vect)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	8f 93       	push	r24
	/* Insert your PIT interrupt handling code here */

	rtcFlag = 1;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 af 40 	sts	0x40AF, r24	; 0x8040af <rtcFlag>

	/* The interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
 362:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7e0153>
}
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_30>:
    Capture Interrupt is generated for every one period measurement of the signal
 * *********************************************************************************
 **/

ISR(TCB2_INT_vect)
{
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	0b b6       	in	r0, 0x3b	; 59
 37e:	0f 92       	push	r0
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31

	if (samplescount < MAXSAMPLES_COUNT) {
 392:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <samplescount>
 396:	8a 30       	cpi	r24, 0x0A	; 10
 398:	88 f5       	brcc	.+98     	; 0x3fc <__vector_30+0x8a>
		pulseWidthSum += TCB2.CCMP;
 39a:	e0 e2       	ldi	r30, 0x20	; 32
 39c:	fb e0       	ldi	r31, 0x0B	; 11
 39e:	24 85       	ldd	r18, Z+12	; 0x0c
 3a0:	35 85       	ldd	r19, Z+13	; 0x0d
 3a2:	40 91 44 40 	lds	r20, 0x4044	; 0x804044 <pulseWidthSum>
 3a6:	50 91 45 40 	lds	r21, 0x4045	; 0x804045 <pulseWidthSum+0x1>
 3aa:	60 91 46 40 	lds	r22, 0x4046	; 0x804046 <pulseWidthSum+0x2>
 3ae:	70 91 47 40 	lds	r23, 0x4047	; 0x804047 <pulseWidthSum+0x3>
 3b2:	42 0f       	add	r20, r18
 3b4:	53 1f       	adc	r21, r19
 3b6:	61 1d       	adc	r22, r1
 3b8:	71 1d       	adc	r23, r1
 3ba:	40 93 44 40 	sts	0x4044, r20	; 0x804044 <pulseWidthSum>
 3be:	50 93 45 40 	sts	0x4045, r21	; 0x804045 <pulseWidthSum+0x1>
 3c2:	60 93 46 40 	sts	0x4046, r22	; 0x804046 <pulseWidthSum+0x2>
 3c6:	70 93 47 40 	sts	0x4047, r23	; 0x804047 <pulseWidthSum+0x3>

		periodSum += TCB2.CNT;
 3ca:	22 85       	ldd	r18, Z+10	; 0x0a
 3cc:	33 85       	ldd	r19, Z+11	; 0x0b
 3ce:	40 91 48 40 	lds	r20, 0x4048	; 0x804048 <periodSum>
 3d2:	50 91 49 40 	lds	r21, 0x4049	; 0x804049 <periodSum+0x1>
 3d6:	60 91 4a 40 	lds	r22, 0x404A	; 0x80404a <periodSum+0x2>
 3da:	70 91 4b 40 	lds	r23, 0x404B	; 0x80404b <periodSum+0x3>
 3de:	42 0f       	add	r20, r18
 3e0:	53 1f       	adc	r21, r19
 3e2:	61 1d       	adc	r22, r1
 3e4:	71 1d       	adc	r23, r1
 3e6:	40 93 48 40 	sts	0x4048, r20	; 0x804048 <periodSum>
 3ea:	50 93 49 40 	sts	0x4049, r21	; 0x804049 <periodSum+0x1>
 3ee:	60 93 4a 40 	sts	0x404A, r22	; 0x80404a <periodSum+0x2>
 3f2:	70 93 4b 40 	sts	0x404B, r23	; 0x80404b <periodSum+0x3>

		samplescount = samplescount + 1;
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 5c 40 	sts	0x405C, r24	; 0x80405c <samplescount>
	} else {
		// no operation
	}

	TCB2.INTFLAGS = TCB_CAPT_bm;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
}
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0b be       	out	0x3b, r0	; 59
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 422:	0e 94 7d 02 	call	0x4fa	; 0x4fa <system_init>
 426:	08 95       	ret

00000428 <main>:
#include "application.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 428:	0e 94 11 02 	call	0x422	; 0x422 <atmel_start_init>

	/* Replace with your application code */
	while (1) {

		// Function measures Frequency and Duty cycle of the signal
		FrequencyAndDutycycleMeasurement();
 42c:	0e 94 ad 00 	call	0x15a	; 0x15a <FrequencyAndDutycycleMeasurement>
 430:	fd cf       	rjmp	.-6      	; 0x42c <main+0x4>

00000432 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 432:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret

0000043a <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 43a:	44 e2       	ldi	r20, 0x24	; 36
 43c:	68 ed       	ldi	r22, 0xD8	; 216
 43e:	88 e6       	ldi	r24, 0x68	; 104
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 9e 02 	call	0x53c	; 0x53c <protected_write_io>
	                 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	08 95       	ret

0000044a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 44a:	78 94       	sei

	return 0;
}
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret

00000450 <mcu_init>:
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 450:	e0 e1       	ldi	r30, 0x10	; 16
 452:	f4 e0       	ldi	r31, 0x04	; 4
 454:	80 81       	ld	r24, Z
 456:	88 60       	ori	r24, 0x08	; 8
 458:	81 93       	st	Z+, r24
 45a:	e8 31       	cpi	r30, 0x18	; 24
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	f8 07       	cpc	r31, r24
 460:	c9 f7       	brne	.-14     	; 0x454 <mcu_init+0x4>
 462:	e0 e3       	ldi	r30, 0x30	; 48
 464:	f4 e0       	ldi	r31, 0x04	; 4
 466:	80 81       	ld	r24, Z
 468:	88 60       	ori	r24, 0x08	; 8
 46a:	81 93       	st	Z+, r24
 46c:	e8 33       	cpi	r30, 0x38	; 56
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	f8 07       	cpc	r31, r24
 472:	c9 f7       	brne	.-14     	; 0x466 <mcu_init+0x16>
 474:	e0 e5       	ldi	r30, 0x50	; 80
 476:	f4 e0       	ldi	r31, 0x04	; 4
 478:	80 81       	ld	r24, Z
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	81 93       	st	Z+, r24
 47e:	e8 35       	cpi	r30, 0x58	; 88
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	f8 07       	cpc	r31, r24
 484:	c9 f7       	brne	.-14     	; 0x478 <mcu_init+0x28>
 486:	e0 e7       	ldi	r30, 0x70	; 112
 488:	f4 e0       	ldi	r31, 0x04	; 4
 48a:	80 81       	ld	r24, Z
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	81 93       	st	Z+, r24
 490:	e8 37       	cpi	r30, 0x78	; 120
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	f8 07       	cpc	r31, r24
 496:	c9 f7       	brne	.-14     	; 0x48a <mcu_init+0x3a>
 498:	e0 e9       	ldi	r30, 0x90	; 144
 49a:	f4 e0       	ldi	r31, 0x04	; 4
 49c:	80 81       	ld	r24, Z
 49e:	88 60       	ori	r24, 0x08	; 8
 4a0:	81 93       	st	Z+, r24
 4a2:	e8 39       	cpi	r30, 0x98	; 152
 4a4:	84 e0       	ldi	r24, 0x04	; 4
 4a6:	f8 07       	cpc	r31, r24
 4a8:	c9 f7       	brne	.-14     	; 0x49c <mcu_init+0x4c>
 4aa:	e0 eb       	ldi	r30, 0xB0	; 176
 4ac:	f4 e0       	ldi	r31, 0x04	; 4
 4ae:	80 81       	ld	r24, Z
 4b0:	88 60       	ori	r24, 0x08	; 8
 4b2:	81 93       	st	Z+, r24
 4b4:	e8 3b       	cpi	r30, 0xB8	; 184
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	f8 07       	cpc	r31, r24
 4ba:	c9 f7       	brne	.-14     	; 0x4ae <mcu_init+0x5e>
 4bc:	e0 ed       	ldi	r30, 0xD0	; 208
 4be:	f4 e0       	ldi	r31, 0x04	; 4
 4c0:	80 81       	ld	r24, Z
 4c2:	88 60       	ori	r24, 0x08	; 8
 4c4:	81 93       	st	Z+, r24
 4c6:	e8 3d       	cpi	r30, 0xD8	; 216
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	f8 07       	cpc	r31, r24
 4cc:	c9 f7       	brne	.-14     	; 0x4c0 <mcu_init+0x70>
 4ce:	08 95       	ret

000004d0 <USART_0_initialization>:
 4d0:	41 98       	cbi	0x08, 1	; 8
 4d2:	e1 e5       	ldi	r30, 0x51	; 81
 4d4:	f4 e0       	ldi	r31, 0x04	; 4
 4d6:	80 81       	ld	r24, Z
 4d8:	87 7f       	andi	r24, 0xF7	; 247
 4da:	80 83       	st	Z, r24
 4dc:	40 9a       	sbi	0x08, 0	; 8
 4de:	48 98       	cbi	0x09, 0	; 9
 4e0:	0e 94 76 03 	call	0x6ec	; 0x6ec <USART_0_init>
 4e4:	08 95       	ret

000004e6 <TIMER_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 4e6:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 4e8:	2c 98       	cbi	0x05, 4	; 5
	    // <true"> High
	    false);

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB2_bm;
 4ea:	e0 ee       	ldi	r30, 0xE0	; 224
 4ec:	f5 e0       	ldi	r31, 0x05	; 5
 4ee:	87 81       	ldd	r24, Z+7	; 0x07
 4f0:	84 60       	ori	r24, 0x04	; 4
 4f2:	87 83       	std	Z+7, r24	; 0x07

	TIMER_0_init();
 4f4:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER_0_init>
 4f8:	08 95       	ret

000004fa <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 4fa:	0e 94 28 02 	call	0x450	; 0x450 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 4fe:	06 98       	cbi	0x00, 6	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 500:	e6 e1       	ldi	r30, 0x16	; 22
 502:	f4 e0       	ldi	r31, 0x04	; 4
 504:	80 81       	ld	r24, Z
 506:	87 7f       	andi	r24, 0xF7	; 247
 508:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	CLKCTRL_init();
 50a:	0e 94 1d 02 	call	0x43a	; 0x43a <CLKCTRL_init>

	USART_0_initialization();
 50e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <USART_0_initialization>
}

void EVENT_SYSTEM_0_initialization(void)
{

	EVENT_SYSTEM_0_init();
 512:	0e 94 96 02 	call	0x52c	; 0x52c <EVENT_SYSTEM_0_init>

	USART_0_initialization();

	EVENT_SYSTEM_0_initialization();

	SLPCTRL_init();
 516:	0e 94 b7 02 	call	0x56e	; 0x56e <SLPCTRL_init>

	CPUINT_init();
 51a:	0e 94 25 02 	call	0x44a	; 0x44a <CPUINT_init>

	BOD_init();
 51e:	0e 94 19 02 	call	0x432	; 0x432 <BOD_init>

	RTC_0_init();
 522:	0e 94 a3 02 	call	0x546	; 0x546 <RTC_0_init>

	TIMER_0_initialization();
 526:	0e 94 73 02 	call	0x4e6	; 0x4e6 <TIMER_0_initialization>
 52a:	08 95       	ret

0000052c <EVENT_SYSTEM_0_init>:
 * \return Initialization status.
 */
int8_t EVENT_SYSTEM_0_init()
{

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTA_PIN6_gc; /* Port A Pin 6 */
 52c:	86 e4       	ldi	r24, 0x46	; 70
 52e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__TEXT_REGION_LENGTH__+0x7e0210>

	// EVSYS.USERTCB1CAPT = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCB1COUNT = EVSYS_USER_OFF_gc; /* Off */

	EVSYS.USERTCB2CAPT = EVSYS_USER_CHANNEL0_gc; /* Connect user to event channel 0 */
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <__TEXT_REGION_LENGTH__+0x7e0243>
	// EVSYS.USERTCD0INPUTA = EVSYS_USER_OFF_gc; /* Off */

	// EVSYS.USERTCD0INPUTB = EVSYS_USER_OFF_gc; /* Off */

	return 0;
}
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	08 95       	ret

0000053c <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 53c:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 53e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 540:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 542:	40 83       	st	Z, r20
	ret                             // Return to caller
 544:	08 95       	ret

00000546 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 546:	e0 e4       	ldi	r30, 0x40	; 64
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	81 81       	ldd	r24, Z+1	; 0x01
 54c:	81 11       	cpse	r24, r1
 54e:	fd cf       	rjmp	.-6      	; 0x54a <RTC_0_init+0x4>
	//		 | 0 << RTC_RTCEN_bp /* Enable: disabled */
	//		 | 0 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator (OSC32K) */
 550:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x7e0147>
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
 554:	e0 e4       	ldi	r30, 0x40	; 64
 556:	f1 e0       	ldi	r31, 0x01	; 1
 558:	81 89       	ldd	r24, Z+17	; 0x11
 55a:	81 11       	cpse	r24, r1
 55c:	fd cf       	rjmp	.-6      	; 0x558 <RTC_0_init+0x12>
	}

	RTC.PITCTRLA = RTC_PERIOD_CYC32768_gc /* RTC Clock Cycles 32768 */
 55e:	e0 e4       	ldi	r30, 0x40	; 64
 560:	f1 e0       	ldi	r31, 0x01	; 1
 562:	81 e7       	ldi	r24, 0x71	; 113
 564:	80 8b       	std	Z+16, r24	; 0x10
	               | 1 << RTC_PITEN_bp;   /* Enable: enabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret

0000056e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	08 95       	ret

00000572 <TIMER_0_init>:

	// TCB2.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB2.CNT = 0x0; /* Count: 0x0 */

	TCB2.CTRLB = 0 << TCB_ASYNC_bp       /* Asynchronous Enable: disabled */
 572:	e0 e2       	ldi	r30, 0x20	; 32
 574:	fb e0       	ldi	r31, 0x0B	; 11
 576:	85 e1       	ldi	r24, 0x15	; 21
 578:	81 83       	std	Z+1, r24	; 0x01
	             | 0 << TCB_CCMPINIT_bp  /* Pin Initial State: disabled */
	             | TCB_CNTMODE_FRQPW_gc; /* Input Capture Frequency and Pulse-Width measurement */

	// TCB2.DBGCTRL = 0 << TCB_DBGRUN_bp; /* Debug Run: disabled */

	TCB2.EVCTRL = 1 << TCB_CAPTEI_bp    /* Event Input Enable: enabled */
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	84 83       	std	Z+4, r24	; 0x04
	              | 0 << TCB_EDGE_bp    /* Event Edge: disabled */
	              | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB2.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
 57e:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB2.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
 580:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	08 95       	ret

00000586 <USART_0_default_rx_isr_cb>:
	USART_0_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_0_rxbuf[tmptail];
}
 586:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
 58a:	e0 91 6a 40 	lds	r30, 0x406A	; 0x80406a <USART_0_rx_head>
 58e:	ef 5f       	subi	r30, 0xFF	; 255
 590:	e7 70       	andi	r30, 0x07	; 7
 592:	80 91 69 40 	lds	r24, 0x4069	; 0x804069 <USART_0_rx_tail>
 596:	e8 17       	cp	r30, r24
 598:	59 f0       	breq	.+22     	; 0x5b0 <USART_0_default_rx_isr_cb+0x2a>
 59a:	e0 93 6a 40 	sts	0x406A, r30	; 0x80406a <USART_0_rx_head>
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	e5 59       	subi	r30, 0x95	; 149
 5a2:	ff 4b       	sbci	r31, 0xBF	; 191
 5a4:	90 83       	st	Z, r25
 5a6:	80 91 68 40 	lds	r24, 0x4068	; 0x804068 <USART_0_rx_elements>
 5aa:	8f 5f       	subi	r24, 0xFF	; 255
 5ac:	80 93 68 40 	sts	0x4068, r24	; 0x804068 <USART_0_rx_elements>
 5b0:	08 95       	ret

000005b2 <USART_0_default_udre_isr_cb>:
 5b2:	80 91 5d 40 	lds	r24, 0x405D	; 0x80405d <USART_0_tx_elements>
 5b6:	88 23       	and	r24, r24
 5b8:	89 f0       	breq	.+34     	; 0x5dc <USART_0_default_udre_isr_cb+0x2a>
 5ba:	e0 91 5e 40 	lds	r30, 0x405E	; 0x80405e <USART_0_tx_tail>
 5be:	ef 5f       	subi	r30, 0xFF	; 255
 5c0:	e7 70       	andi	r30, 0x07	; 7
 5c2:	e0 93 5e 40 	sts	0x405E, r30	; 0x80405e <USART_0_tx_tail>
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	e0 5a       	subi	r30, 0xA0	; 160
 5ca:	ff 4b       	sbci	r31, 0xBF	; 191
 5cc:	80 81       	ld	r24, Z
 5ce:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
 5d2:	80 91 5d 40 	lds	r24, 0x405D	; 0x80405d <USART_0_tx_elements>
 5d6:	81 50       	subi	r24, 0x01	; 1
 5d8:	80 93 5d 40 	sts	0x405D, r24	; 0x80405d <USART_0_tx_elements>
 5dc:	80 91 5d 40 	lds	r24, 0x405D	; 0x80405d <USART_0_tx_elements>
 5e0:	81 11       	cpse	r24, r1
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <USART_0_default_udre_isr_cb+0x3c>
 5e4:	e0 e2       	ldi	r30, 0x20	; 32
 5e6:	f8 e0       	ldi	r31, 0x08	; 8
 5e8:	85 81       	ldd	r24, Z+5	; 0x05
 5ea:	8f 7d       	andi	r24, 0xDF	; 223
 5ec:	85 83       	std	Z+5, r24	; 0x05
 5ee:	08 95       	ret

000005f0 <__vector_31>:
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	0b b6       	in	r0, 0x3b	; 59
 5fc:	0f 92       	push	r0
 5fe:	2f 93       	push	r18
 600:	3f 93       	push	r19
 602:	4f 93       	push	r20
 604:	5f 93       	push	r21
 606:	6f 93       	push	r22
 608:	7f 93       	push	r23
 60a:	8f 93       	push	r24
 60c:	9f 93       	push	r25
 60e:	af 93       	push	r26
 610:	bf 93       	push	r27
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
 616:	e0 91 02 40 	lds	r30, 0x4002	; 0x804002 <USART_0_rx_isr_cb>
 61a:	f0 91 03 40 	lds	r31, 0x4003	; 0x804003 <USART_0_rx_isr_cb+0x1>
 61e:	30 97       	sbiw	r30, 0x00	; 0
 620:	09 f0       	breq	.+2      	; 0x624 <__vector_31+0x34>
 622:	09 95       	icall
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	7f 91       	pop	r23
 632:	6f 91       	pop	r22
 634:	5f 91       	pop	r21
 636:	4f 91       	pop	r20
 638:	3f 91       	pop	r19
 63a:	2f 91       	pop	r18
 63c:	0f 90       	pop	r0
 63e:	0b be       	out	0x3b, r0	; 59
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <__vector_32>:
 64a:	1f 92       	push	r1
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	0b b6       	in	r0, 0x3b	; 59
 656:	0f 92       	push	r0
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	4f 93       	push	r20
 65e:	5f 93       	push	r21
 660:	6f 93       	push	r22
 662:	7f 93       	push	r23
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
 670:	e0 91 00 40 	lds	r30, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 674:	f0 91 01 40 	lds	r31, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 678:	30 97       	sbiw	r30, 0x00	; 0
 67a:	09 f0       	breq	.+2      	; 0x67e <__vector_32+0x34>
 67c:	09 95       	icall
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	5f 91       	pop	r21
 690:	4f 91       	pop	r20
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0b be       	out	0x3b, r0	; 59
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
 6a4:	20 91 5f 40 	lds	r18, 0x405F	; 0x80405f <USART_0_tx_head>
 6a8:	2f 5f       	subi	r18, 0xFF	; 255
 6aa:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
 6ac:	90 91 5d 40 	lds	r25, 0x405D	; 0x80405d <USART_0_tx_elements>
 6b0:	98 30       	cpi	r25, 0x08	; 8
 6b2:	e1 f3       	breq	.-8      	; 0x6ac <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
 6b4:	e2 2f       	mov	r30, r18
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	e0 5a       	subi	r30, 0xA0	; 160
 6ba:	ff 4b       	sbci	r31, 0xBF	; 191
 6bc:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
 6be:	20 93 5f 40 	sts	0x405F, r18	; 0x80405f <USART_0_tx_head>
	ENTER_CRITICAL(W);
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	0f 92       	push	r0
	USART_0_tx_elements++;
 6c8:	80 91 5d 40 	lds	r24, 0x405D	; 0x80405d <USART_0_tx_elements>
 6cc:	8f 5f       	subi	r24, 0xFF	; 255
 6ce:	80 93 5d 40 	sts	0x405D, r24	; 0x80405d <USART_0_tx_elements>
	EXIT_CRITICAL(W);
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART1.CTRLA |= (1 << USART_DREIE_bp);
 6d6:	e0 e2       	ldi	r30, 0x20	; 32
 6d8:	f8 e0       	ldi	r31, 0x08	; 8
 6da:	85 81       	ldd	r24, Z+5	; 0x05
 6dc:	80 62       	ori	r24, 0x20	; 32
 6de:	85 83       	std	Z+5, r24	; 0x05
 6e0:	08 95       	ret

000006e2 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 6e2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <USART_0_write>
	return 0;
}
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	08 95       	ret

000006ec <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(115200); /* set baud rate register */
 6ec:	e0 e2       	ldi	r30, 0x20	; 32
 6ee:	f8 e0       	ldi	r31, 0x08	; 8
 6f0:	81 e4       	ldi	r24, 0x41	; 65
 6f2:	93 e0       	ldi	r25, 0x03	; 3
 6f4:	80 87       	std	Z+8, r24	; 0x08
 6f6:	91 87       	std	Z+9, r25	; 0x09

	USART1.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
 6f8:	80 e8       	ldi	r24, 0x80	; 128
 6fa:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART1.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 6fc:	80 ec       	ldi	r24, 0xC0	; 192
 6fe:	86 83       	std	Z+6, r24	; 0x06
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_0_rx_tail     = x;
 700:	10 92 69 40 	sts	0x4069, r1	; 0x804069 <USART_0_rx_tail>
	USART_0_rx_head     = x;
 704:	10 92 6a 40 	sts	0x406A, r1	; 0x80406a <USART_0_rx_head>
	USART_0_rx_elements = x;
 708:	10 92 68 40 	sts	0x4068, r1	; 0x804068 <USART_0_rx_elements>
	USART_0_tx_tail     = x;
 70c:	10 92 5e 40 	sts	0x405E, r1	; 0x80405e <USART_0_tx_tail>
	USART_0_tx_head     = x;
 710:	10 92 5f 40 	sts	0x405F, r1	; 0x80405f <USART_0_tx_head>
	USART_0_tx_elements = x;
 714:	10 92 5d 40 	sts	0x405D, r1	; 0x80405d <USART_0_tx_elements>

#if defined(__GNUC__)
	stdout = &USART_0_stream;
 718:	84 e0       	ldi	r24, 0x04	; 4
 71a:	90 e4       	ldi	r25, 0x40	; 64
 71c:	80 93 b2 40 	sts	0x40B2, r24	; 0x8040b2 <__iob+0x2>
 720:	90 93 b3 40 	sts	0x40B3, r25	; 0x8040b3 <__iob+0x3>
#endif

	return 0;
}
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret

00000728 <__udivmodsi4>:
 728:	a1 e2       	ldi	r26, 0x21	; 33
 72a:	1a 2e       	mov	r1, r26
 72c:	aa 1b       	sub	r26, r26
 72e:	bb 1b       	sub	r27, r27
 730:	fd 01       	movw	r30, r26
 732:	0d c0       	rjmp	.+26     	; 0x74e <__udivmodsi4_ep>

00000734 <__udivmodsi4_loop>:
 734:	aa 1f       	adc	r26, r26
 736:	bb 1f       	adc	r27, r27
 738:	ee 1f       	adc	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	a2 17       	cp	r26, r18
 73e:	b3 07       	cpc	r27, r19
 740:	e4 07       	cpc	r30, r20
 742:	f5 07       	cpc	r31, r21
 744:	20 f0       	brcs	.+8      	; 0x74e <__udivmodsi4_ep>
 746:	a2 1b       	sub	r26, r18
 748:	b3 0b       	sbc	r27, r19
 74a:	e4 0b       	sbc	r30, r20
 74c:	f5 0b       	sbc	r31, r21

0000074e <__udivmodsi4_ep>:
 74e:	66 1f       	adc	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	1a 94       	dec	r1
 758:	69 f7       	brne	.-38     	; 0x734 <__udivmodsi4_loop>
 75a:	60 95       	com	r22
 75c:	70 95       	com	r23
 75e:	80 95       	com	r24
 760:	90 95       	com	r25
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	bd 01       	movw	r22, r26
 768:	cf 01       	movw	r24, r30
 76a:	08 95       	ret

0000076c <__muluhisi3>:
 76c:	0e 94 c1 03 	call	0x782	; 0x782 <__umulhisi3>
 770:	a5 9f       	mul	r26, r21
 772:	90 0d       	add	r25, r0
 774:	b4 9f       	mul	r27, r20
 776:	90 0d       	add	r25, r0
 778:	a4 9f       	mul	r26, r20
 77a:	80 0d       	add	r24, r0
 77c:	91 1d       	adc	r25, r1
 77e:	11 24       	eor	r1, r1
 780:	08 95       	ret

00000782 <__umulhisi3>:
 782:	a2 9f       	mul	r26, r18
 784:	b0 01       	movw	r22, r0
 786:	b3 9f       	mul	r27, r19
 788:	c0 01       	movw	r24, r0
 78a:	a3 9f       	mul	r26, r19
 78c:	70 0d       	add	r23, r0
 78e:	81 1d       	adc	r24, r1
 790:	11 24       	eor	r1, r1
 792:	91 1d       	adc	r25, r1
 794:	b2 9f       	mul	r27, r18
 796:	70 0d       	add	r23, r0
 798:	81 1d       	adc	r24, r1
 79a:	11 24       	eor	r1, r1
 79c:	91 1d       	adc	r25, r1
 79e:	08 95       	ret

000007a0 <sprintf>:
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
 7ac:	2e 97       	sbiw	r28, 0x0e	; 14
 7ae:	cd bf       	out	0x3d, r28	; 61
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0d 89       	ldd	r16, Y+21	; 0x15
 7b4:	1e 89       	ldd	r17, Y+22	; 0x16
 7b6:	86 e0       	ldi	r24, 0x06	; 6
 7b8:	8c 83       	std	Y+4, r24	; 0x04
 7ba:	09 83       	std	Y+1, r16	; 0x01
 7bc:	1a 83       	std	Y+2, r17	; 0x02
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	9f e7       	ldi	r25, 0x7F	; 127
 7c2:	8d 83       	std	Y+5, r24	; 0x05
 7c4:	9e 83       	std	Y+6, r25	; 0x06
 7c6:	ae 01       	movw	r20, r28
 7c8:	47 5e       	subi	r20, 0xE7	; 231
 7ca:	5f 4f       	sbci	r21, 0xFF	; 255
 7cc:	6f 89       	ldd	r22, Y+23	; 0x17
 7ce:	78 8d       	ldd	r23, Y+24	; 0x18
 7d0:	ce 01       	movw	r24, r28
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <vfprintf>
 7d8:	ef 81       	ldd	r30, Y+7	; 0x07
 7da:	f8 85       	ldd	r31, Y+8	; 0x08
 7dc:	e0 0f       	add	r30, r16
 7de:	f1 1f       	adc	r31, r17
 7e0:	10 82       	st	Z, r1
 7e2:	2e 96       	adiw	r28, 0x0e	; 14
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	08 95       	ret

000007f2 <vfprintf>:
 7f2:	2f 92       	push	r2
 7f4:	3f 92       	push	r3
 7f6:	4f 92       	push	r4
 7f8:	5f 92       	push	r5
 7fa:	6f 92       	push	r6
 7fc:	7f 92       	push	r7
 7fe:	8f 92       	push	r8
 800:	9f 92       	push	r9
 802:	af 92       	push	r10
 804:	bf 92       	push	r11
 806:	cf 92       	push	r12
 808:	df 92       	push	r13
 80a:	ef 92       	push	r14
 80c:	ff 92       	push	r15
 80e:	0f 93       	push	r16
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	cd b7       	in	r28, 0x3d	; 61
 818:	de b7       	in	r29, 0x3e	; 62
 81a:	2b 97       	sbiw	r28, 0x0b	; 11
 81c:	cd bf       	out	0x3d, r28	; 61
 81e:	de bf       	out	0x3e, r29	; 62
 820:	6c 01       	movw	r12, r24
 822:	7b 01       	movw	r14, r22
 824:	8a 01       	movw	r16, r20
 826:	fc 01       	movw	r30, r24
 828:	16 82       	std	Z+6, r1	; 0x06
 82a:	17 82       	std	Z+7, r1	; 0x07
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	81 ff       	sbrs	r24, 1
 830:	cc c1       	rjmp	.+920    	; 0xbca <vfprintf+0x3d8>
 832:	ce 01       	movw	r24, r28
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	3c 01       	movw	r6, r24
 838:	f6 01       	movw	r30, r12
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	f7 01       	movw	r30, r14
 83e:	93 fd       	sbrc	r25, 3
 840:	85 91       	lpm	r24, Z+
 842:	93 ff       	sbrs	r25, 3
 844:	81 91       	ld	r24, Z+
 846:	7f 01       	movw	r14, r30
 848:	88 23       	and	r24, r24
 84a:	09 f4       	brne	.+2      	; 0x84e <vfprintf+0x5c>
 84c:	ba c1       	rjmp	.+884    	; 0xbc2 <vfprintf+0x3d0>
 84e:	85 32       	cpi	r24, 0x25	; 37
 850:	39 f4       	brne	.+14     	; 0x860 <vfprintf+0x6e>
 852:	93 fd       	sbrc	r25, 3
 854:	85 91       	lpm	r24, Z+
 856:	93 ff       	sbrs	r25, 3
 858:	81 91       	ld	r24, Z+
 85a:	7f 01       	movw	r14, r30
 85c:	85 32       	cpi	r24, 0x25	; 37
 85e:	29 f4       	brne	.+10     	; 0x86a <vfprintf+0x78>
 860:	b6 01       	movw	r22, r12
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 868:	e7 cf       	rjmp	.-50     	; 0x838 <vfprintf+0x46>
 86a:	91 2c       	mov	r9, r1
 86c:	21 2c       	mov	r2, r1
 86e:	31 2c       	mov	r3, r1
 870:	ff e1       	ldi	r31, 0x1F	; 31
 872:	f3 15       	cp	r31, r3
 874:	d8 f0       	brcs	.+54     	; 0x8ac <vfprintf+0xba>
 876:	8b 32       	cpi	r24, 0x2B	; 43
 878:	79 f0       	breq	.+30     	; 0x898 <vfprintf+0xa6>
 87a:	38 f4       	brcc	.+14     	; 0x88a <vfprintf+0x98>
 87c:	80 32       	cpi	r24, 0x20	; 32
 87e:	79 f0       	breq	.+30     	; 0x89e <vfprintf+0xac>
 880:	83 32       	cpi	r24, 0x23	; 35
 882:	a1 f4       	brne	.+40     	; 0x8ac <vfprintf+0xba>
 884:	23 2d       	mov	r18, r3
 886:	20 61       	ori	r18, 0x10	; 16
 888:	1d c0       	rjmp	.+58     	; 0x8c4 <vfprintf+0xd2>
 88a:	8d 32       	cpi	r24, 0x2D	; 45
 88c:	61 f0       	breq	.+24     	; 0x8a6 <vfprintf+0xb4>
 88e:	80 33       	cpi	r24, 0x30	; 48
 890:	69 f4       	brne	.+26     	; 0x8ac <vfprintf+0xba>
 892:	23 2d       	mov	r18, r3
 894:	21 60       	ori	r18, 0x01	; 1
 896:	16 c0       	rjmp	.+44     	; 0x8c4 <vfprintf+0xd2>
 898:	83 2d       	mov	r24, r3
 89a:	82 60       	ori	r24, 0x02	; 2
 89c:	38 2e       	mov	r3, r24
 89e:	e3 2d       	mov	r30, r3
 8a0:	e4 60       	ori	r30, 0x04	; 4
 8a2:	3e 2e       	mov	r3, r30
 8a4:	2a c0       	rjmp	.+84     	; 0x8fa <vfprintf+0x108>
 8a6:	f3 2d       	mov	r31, r3
 8a8:	f8 60       	ori	r31, 0x08	; 8
 8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <vfprintf+0xf4>
 8ac:	37 fc       	sbrc	r3, 7
 8ae:	2d c0       	rjmp	.+90     	; 0x90a <vfprintf+0x118>
 8b0:	20 ed       	ldi	r18, 0xD0	; 208
 8b2:	28 0f       	add	r18, r24
 8b4:	2a 30       	cpi	r18, 0x0A	; 10
 8b6:	40 f0       	brcs	.+16     	; 0x8c8 <vfprintf+0xd6>
 8b8:	8e 32       	cpi	r24, 0x2E	; 46
 8ba:	b9 f4       	brne	.+46     	; 0x8ea <vfprintf+0xf8>
 8bc:	36 fc       	sbrc	r3, 6
 8be:	81 c1       	rjmp	.+770    	; 0xbc2 <vfprintf+0x3d0>
 8c0:	23 2d       	mov	r18, r3
 8c2:	20 64       	ori	r18, 0x40	; 64
 8c4:	32 2e       	mov	r3, r18
 8c6:	19 c0       	rjmp	.+50     	; 0x8fa <vfprintf+0x108>
 8c8:	36 fe       	sbrs	r3, 6
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <vfprintf+0xe6>
 8cc:	8a e0       	ldi	r24, 0x0A	; 10
 8ce:	98 9e       	mul	r9, r24
 8d0:	20 0d       	add	r18, r0
 8d2:	11 24       	eor	r1, r1
 8d4:	92 2e       	mov	r9, r18
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <vfprintf+0x108>
 8d8:	ea e0       	ldi	r30, 0x0A	; 10
 8da:	2e 9e       	mul	r2, r30
 8dc:	20 0d       	add	r18, r0
 8de:	11 24       	eor	r1, r1
 8e0:	22 2e       	mov	r2, r18
 8e2:	f3 2d       	mov	r31, r3
 8e4:	f0 62       	ori	r31, 0x20	; 32
 8e6:	3f 2e       	mov	r3, r31
 8e8:	08 c0       	rjmp	.+16     	; 0x8fa <vfprintf+0x108>
 8ea:	8c 36       	cpi	r24, 0x6C	; 108
 8ec:	21 f4       	brne	.+8      	; 0x8f6 <vfprintf+0x104>
 8ee:	83 2d       	mov	r24, r3
 8f0:	80 68       	ori	r24, 0x80	; 128
 8f2:	38 2e       	mov	r3, r24
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0x108>
 8f6:	88 36       	cpi	r24, 0x68	; 104
 8f8:	41 f4       	brne	.+16     	; 0x90a <vfprintf+0x118>
 8fa:	f7 01       	movw	r30, r14
 8fc:	93 fd       	sbrc	r25, 3
 8fe:	85 91       	lpm	r24, Z+
 900:	93 ff       	sbrs	r25, 3
 902:	81 91       	ld	r24, Z+
 904:	7f 01       	movw	r14, r30
 906:	81 11       	cpse	r24, r1
 908:	b3 cf       	rjmp	.-154    	; 0x870 <vfprintf+0x7e>
 90a:	98 2f       	mov	r25, r24
 90c:	9f 7d       	andi	r25, 0xDF	; 223
 90e:	95 54       	subi	r25, 0x45	; 69
 910:	93 30       	cpi	r25, 0x03	; 3
 912:	28 f4       	brcc	.+10     	; 0x91e <vfprintf+0x12c>
 914:	0c 5f       	subi	r16, 0xFC	; 252
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	9f e3       	ldi	r25, 0x3F	; 63
 91a:	99 83       	std	Y+1, r25	; 0x01
 91c:	0d c0       	rjmp	.+26     	; 0x938 <vfprintf+0x146>
 91e:	83 36       	cpi	r24, 0x63	; 99
 920:	31 f0       	breq	.+12     	; 0x92e <vfprintf+0x13c>
 922:	83 37       	cpi	r24, 0x73	; 115
 924:	71 f0       	breq	.+28     	; 0x942 <vfprintf+0x150>
 926:	83 35       	cpi	r24, 0x53	; 83
 928:	09 f0       	breq	.+2      	; 0x92c <vfprintf+0x13a>
 92a:	59 c0       	rjmp	.+178    	; 0x9de <vfprintf+0x1ec>
 92c:	21 c0       	rjmp	.+66     	; 0x970 <vfprintf+0x17e>
 92e:	f8 01       	movw	r30, r16
 930:	80 81       	ld	r24, Z
 932:	89 83       	std	Y+1, r24	; 0x01
 934:	0e 5f       	subi	r16, 0xFE	; 254
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	88 24       	eor	r8, r8
 93a:	83 94       	inc	r8
 93c:	91 2c       	mov	r9, r1
 93e:	53 01       	movw	r10, r6
 940:	13 c0       	rjmp	.+38     	; 0x968 <vfprintf+0x176>
 942:	28 01       	movw	r4, r16
 944:	f2 e0       	ldi	r31, 0x02	; 2
 946:	4f 0e       	add	r4, r31
 948:	51 1c       	adc	r5, r1
 94a:	f8 01       	movw	r30, r16
 94c:	a0 80       	ld	r10, Z
 94e:	b1 80       	ldd	r11, Z+1	; 0x01
 950:	36 fe       	sbrs	r3, 6
 952:	03 c0       	rjmp	.+6      	; 0x95a <vfprintf+0x168>
 954:	69 2d       	mov	r22, r9
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <vfprintf+0x16c>
 95a:	6f ef       	ldi	r22, 0xFF	; 255
 95c:	7f ef       	ldi	r23, 0xFF	; 255
 95e:	c5 01       	movw	r24, r10
 960:	0e 94 08 06 	call	0xc10	; 0xc10 <strnlen>
 964:	4c 01       	movw	r8, r24
 966:	82 01       	movw	r16, r4
 968:	f3 2d       	mov	r31, r3
 96a:	ff 77       	andi	r31, 0x7F	; 127
 96c:	3f 2e       	mov	r3, r31
 96e:	16 c0       	rjmp	.+44     	; 0x99c <vfprintf+0x1aa>
 970:	28 01       	movw	r4, r16
 972:	22 e0       	ldi	r18, 0x02	; 2
 974:	42 0e       	add	r4, r18
 976:	51 1c       	adc	r5, r1
 978:	f8 01       	movw	r30, r16
 97a:	a0 80       	ld	r10, Z
 97c:	b1 80       	ldd	r11, Z+1	; 0x01
 97e:	36 fe       	sbrs	r3, 6
 980:	03 c0       	rjmp	.+6      	; 0x988 <vfprintf+0x196>
 982:	69 2d       	mov	r22, r9
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <vfprintf+0x19a>
 988:	6f ef       	ldi	r22, 0xFF	; 255
 98a:	7f ef       	ldi	r23, 0xFF	; 255
 98c:	c5 01       	movw	r24, r10
 98e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <strnlen_P>
 992:	4c 01       	movw	r8, r24
 994:	f3 2d       	mov	r31, r3
 996:	f0 68       	ori	r31, 0x80	; 128
 998:	3f 2e       	mov	r3, r31
 99a:	82 01       	movw	r16, r4
 99c:	33 fc       	sbrc	r3, 3
 99e:	1b c0       	rjmp	.+54     	; 0x9d6 <vfprintf+0x1e4>
 9a0:	82 2d       	mov	r24, r2
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	88 16       	cp	r8, r24
 9a6:	99 06       	cpc	r9, r25
 9a8:	b0 f4       	brcc	.+44     	; 0x9d6 <vfprintf+0x1e4>
 9aa:	b6 01       	movw	r22, r12
 9ac:	80 e2       	ldi	r24, 0x20	; 32
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 9b4:	2a 94       	dec	r2
 9b6:	f4 cf       	rjmp	.-24     	; 0x9a0 <vfprintf+0x1ae>
 9b8:	f5 01       	movw	r30, r10
 9ba:	37 fc       	sbrc	r3, 7
 9bc:	85 91       	lpm	r24, Z+
 9be:	37 fe       	sbrs	r3, 7
 9c0:	81 91       	ld	r24, Z+
 9c2:	5f 01       	movw	r10, r30
 9c4:	b6 01       	movw	r22, r12
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 9cc:	21 10       	cpse	r2, r1
 9ce:	2a 94       	dec	r2
 9d0:	21 e0       	ldi	r18, 0x01	; 1
 9d2:	82 1a       	sub	r8, r18
 9d4:	91 08       	sbc	r9, r1
 9d6:	81 14       	cp	r8, r1
 9d8:	91 04       	cpc	r9, r1
 9da:	71 f7       	brne	.-36     	; 0x9b8 <vfprintf+0x1c6>
 9dc:	e8 c0       	rjmp	.+464    	; 0xbae <vfprintf+0x3bc>
 9de:	84 36       	cpi	r24, 0x64	; 100
 9e0:	11 f0       	breq	.+4      	; 0x9e6 <vfprintf+0x1f4>
 9e2:	89 36       	cpi	r24, 0x69	; 105
 9e4:	41 f5       	brne	.+80     	; 0xa36 <vfprintf+0x244>
 9e6:	f8 01       	movw	r30, r16
 9e8:	37 fe       	sbrs	r3, 7
 9ea:	07 c0       	rjmp	.+14     	; 0x9fa <vfprintf+0x208>
 9ec:	60 81       	ld	r22, Z
 9ee:	71 81       	ldd	r23, Z+1	; 0x01
 9f0:	82 81       	ldd	r24, Z+2	; 0x02
 9f2:	93 81       	ldd	r25, Z+3	; 0x03
 9f4:	0c 5f       	subi	r16, 0xFC	; 252
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <vfprintf+0x218>
 9fa:	60 81       	ld	r22, Z
 9fc:	71 81       	ldd	r23, Z+1	; 0x01
 9fe:	07 2e       	mov	r0, r23
 a00:	00 0c       	add	r0, r0
 a02:	88 0b       	sbc	r24, r24
 a04:	99 0b       	sbc	r25, r25
 a06:	0e 5f       	subi	r16, 0xFE	; 254
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	f3 2d       	mov	r31, r3
 a0c:	ff 76       	andi	r31, 0x6F	; 111
 a0e:	3f 2e       	mov	r3, r31
 a10:	97 ff       	sbrs	r25, 7
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <vfprintf+0x234>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	f0 68       	ori	r31, 0x80	; 128
 a24:	3f 2e       	mov	r3, r31
 a26:	2a e0       	ldi	r18, 0x0A	; 10
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	a3 01       	movw	r20, r6
 a2c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ultoa_invert>
 a30:	88 2e       	mov	r8, r24
 a32:	86 18       	sub	r8, r6
 a34:	45 c0       	rjmp	.+138    	; 0xac0 <vfprintf+0x2ce>
 a36:	85 37       	cpi	r24, 0x75	; 117
 a38:	31 f4       	brne	.+12     	; 0xa46 <vfprintf+0x254>
 a3a:	23 2d       	mov	r18, r3
 a3c:	2f 7e       	andi	r18, 0xEF	; 239
 a3e:	b2 2e       	mov	r11, r18
 a40:	2a e0       	ldi	r18, 0x0A	; 10
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	25 c0       	rjmp	.+74     	; 0xa90 <vfprintf+0x29e>
 a46:	93 2d       	mov	r25, r3
 a48:	99 7f       	andi	r25, 0xF9	; 249
 a4a:	b9 2e       	mov	r11, r25
 a4c:	8f 36       	cpi	r24, 0x6F	; 111
 a4e:	c1 f0       	breq	.+48     	; 0xa80 <vfprintf+0x28e>
 a50:	18 f4       	brcc	.+6      	; 0xa58 <vfprintf+0x266>
 a52:	88 35       	cpi	r24, 0x58	; 88
 a54:	79 f0       	breq	.+30     	; 0xa74 <vfprintf+0x282>
 a56:	b5 c0       	rjmp	.+362    	; 0xbc2 <vfprintf+0x3d0>
 a58:	80 37       	cpi	r24, 0x70	; 112
 a5a:	19 f0       	breq	.+6      	; 0xa62 <vfprintf+0x270>
 a5c:	88 37       	cpi	r24, 0x78	; 120
 a5e:	21 f0       	breq	.+8      	; 0xa68 <vfprintf+0x276>
 a60:	b0 c0       	rjmp	.+352    	; 0xbc2 <vfprintf+0x3d0>
 a62:	e9 2f       	mov	r30, r25
 a64:	e0 61       	ori	r30, 0x10	; 16
 a66:	be 2e       	mov	r11, r30
 a68:	b4 fe       	sbrs	r11, 4
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <vfprintf+0x294>
 a6c:	fb 2d       	mov	r31, r11
 a6e:	f4 60       	ori	r31, 0x04	; 4
 a70:	bf 2e       	mov	r11, r31
 a72:	09 c0       	rjmp	.+18     	; 0xa86 <vfprintf+0x294>
 a74:	34 fe       	sbrs	r3, 4
 a76:	0a c0       	rjmp	.+20     	; 0xa8c <vfprintf+0x29a>
 a78:	29 2f       	mov	r18, r25
 a7a:	26 60       	ori	r18, 0x06	; 6
 a7c:	b2 2e       	mov	r11, r18
 a7e:	06 c0       	rjmp	.+12     	; 0xa8c <vfprintf+0x29a>
 a80:	28 e0       	ldi	r18, 0x08	; 8
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	05 c0       	rjmp	.+10     	; 0xa90 <vfprintf+0x29e>
 a86:	20 e1       	ldi	r18, 0x10	; 16
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <vfprintf+0x29e>
 a8c:	20 e1       	ldi	r18, 0x10	; 16
 a8e:	32 e0       	ldi	r19, 0x02	; 2
 a90:	f8 01       	movw	r30, r16
 a92:	b7 fe       	sbrs	r11, 7
 a94:	07 c0       	rjmp	.+14     	; 0xaa4 <vfprintf+0x2b2>
 a96:	60 81       	ld	r22, Z
 a98:	71 81       	ldd	r23, Z+1	; 0x01
 a9a:	82 81       	ldd	r24, Z+2	; 0x02
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	0c 5f       	subi	r16, 0xFC	; 252
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <vfprintf+0x2be>
 aa4:	60 81       	ld	r22, Z
 aa6:	71 81       	ldd	r23, Z+1	; 0x01
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 5f       	subi	r16, 0xFE	; 254
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
 ab0:	a3 01       	movw	r20, r6
 ab2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ultoa_invert>
 ab6:	88 2e       	mov	r8, r24
 ab8:	86 18       	sub	r8, r6
 aba:	fb 2d       	mov	r31, r11
 abc:	ff 77       	andi	r31, 0x7F	; 127
 abe:	3f 2e       	mov	r3, r31
 ac0:	36 fe       	sbrs	r3, 6
 ac2:	0d c0       	rjmp	.+26     	; 0xade <vfprintf+0x2ec>
 ac4:	23 2d       	mov	r18, r3
 ac6:	2e 7f       	andi	r18, 0xFE	; 254
 ac8:	a2 2e       	mov	r10, r18
 aca:	89 14       	cp	r8, r9
 acc:	58 f4       	brcc	.+22     	; 0xae4 <vfprintf+0x2f2>
 ace:	34 fe       	sbrs	r3, 4
 ad0:	0b c0       	rjmp	.+22     	; 0xae8 <vfprintf+0x2f6>
 ad2:	32 fc       	sbrc	r3, 2
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <vfprintf+0x2f6>
 ad6:	83 2d       	mov	r24, r3
 ad8:	8e 7e       	andi	r24, 0xEE	; 238
 ada:	a8 2e       	mov	r10, r24
 adc:	05 c0       	rjmp	.+10     	; 0xae8 <vfprintf+0x2f6>
 ade:	b8 2c       	mov	r11, r8
 ae0:	a3 2c       	mov	r10, r3
 ae2:	03 c0       	rjmp	.+6      	; 0xaea <vfprintf+0x2f8>
 ae4:	b8 2c       	mov	r11, r8
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <vfprintf+0x2f8>
 ae8:	b9 2c       	mov	r11, r9
 aea:	a4 fe       	sbrs	r10, 4
 aec:	0f c0       	rjmp	.+30     	; 0xb0c <vfprintf+0x31a>
 aee:	fe 01       	movw	r30, r28
 af0:	e8 0d       	add	r30, r8
 af2:	f1 1d       	adc	r31, r1
 af4:	80 81       	ld	r24, Z
 af6:	80 33       	cpi	r24, 0x30	; 48
 af8:	21 f4       	brne	.+8      	; 0xb02 <vfprintf+0x310>
 afa:	9a 2d       	mov	r25, r10
 afc:	99 7e       	andi	r25, 0xE9	; 233
 afe:	a9 2e       	mov	r10, r25
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <vfprintf+0x322>
 b02:	a2 fe       	sbrs	r10, 2
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <vfprintf+0x320>
 b06:	b3 94       	inc	r11
 b08:	b3 94       	inc	r11
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <vfprintf+0x322>
 b0c:	8a 2d       	mov	r24, r10
 b0e:	86 78       	andi	r24, 0x86	; 134
 b10:	09 f0       	breq	.+2      	; 0xb14 <vfprintf+0x322>
 b12:	b3 94       	inc	r11
 b14:	a3 fc       	sbrc	r10, 3
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <vfprintf+0x348>
 b18:	a0 fe       	sbrs	r10, 0
 b1a:	06 c0       	rjmp	.+12     	; 0xb28 <vfprintf+0x336>
 b1c:	b2 14       	cp	r11, r2
 b1e:	88 f4       	brcc	.+34     	; 0xb42 <vfprintf+0x350>
 b20:	28 0c       	add	r2, r8
 b22:	92 2c       	mov	r9, r2
 b24:	9b 18       	sub	r9, r11
 b26:	0e c0       	rjmp	.+28     	; 0xb44 <vfprintf+0x352>
 b28:	b2 14       	cp	r11, r2
 b2a:	60 f4       	brcc	.+24     	; 0xb44 <vfprintf+0x352>
 b2c:	b6 01       	movw	r22, r12
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b36:	b3 94       	inc	r11
 b38:	f7 cf       	rjmp	.-18     	; 0xb28 <vfprintf+0x336>
 b3a:	b2 14       	cp	r11, r2
 b3c:	18 f4       	brcc	.+6      	; 0xb44 <vfprintf+0x352>
 b3e:	2b 18       	sub	r2, r11
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <vfprintf+0x354>
 b42:	98 2c       	mov	r9, r8
 b44:	21 2c       	mov	r2, r1
 b46:	a4 fe       	sbrs	r10, 4
 b48:	10 c0       	rjmp	.+32     	; 0xb6a <vfprintf+0x378>
 b4a:	b6 01       	movw	r22, r12
 b4c:	80 e3       	ldi	r24, 0x30	; 48
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b54:	a2 fe       	sbrs	r10, 2
 b56:	17 c0       	rjmp	.+46     	; 0xb86 <vfprintf+0x394>
 b58:	a1 fc       	sbrc	r10, 1
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <vfprintf+0x370>
 b5c:	88 e7       	ldi	r24, 0x78	; 120
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0x374>
 b62:	88 e5       	ldi	r24, 0x58	; 88
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	b6 01       	movw	r22, r12
 b68:	0c c0       	rjmp	.+24     	; 0xb82 <vfprintf+0x390>
 b6a:	8a 2d       	mov	r24, r10
 b6c:	86 78       	andi	r24, 0x86	; 134
 b6e:	59 f0       	breq	.+22     	; 0xb86 <vfprintf+0x394>
 b70:	a1 fe       	sbrs	r10, 1
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <vfprintf+0x386>
 b74:	8b e2       	ldi	r24, 0x2B	; 43
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <vfprintf+0x388>
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	a7 fc       	sbrc	r10, 7
 b7c:	8d e2       	ldi	r24, 0x2D	; 45
 b7e:	b6 01       	movw	r22, r12
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b86:	89 14       	cp	r8, r9
 b88:	38 f4       	brcc	.+14     	; 0xb98 <vfprintf+0x3a6>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e3       	ldi	r24, 0x30	; 48
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b94:	9a 94       	dec	r9
 b96:	f7 cf       	rjmp	.-18     	; 0xb86 <vfprintf+0x394>
 b98:	8a 94       	dec	r8
 b9a:	f3 01       	movw	r30, r6
 b9c:	e8 0d       	add	r30, r8
 b9e:	f1 1d       	adc	r31, r1
 ba0:	80 81       	ld	r24, Z
 ba2:	b6 01       	movw	r22, r12
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 baa:	81 10       	cpse	r8, r1
 bac:	f5 cf       	rjmp	.-22     	; 0xb98 <vfprintf+0x3a6>
 bae:	22 20       	and	r2, r2
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <vfprintf+0x3c2>
 bb2:	42 ce       	rjmp	.-892    	; 0x838 <vfprintf+0x46>
 bb4:	b6 01       	movw	r22, r12
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 bbe:	2a 94       	dec	r2
 bc0:	f6 cf       	rjmp	.-20     	; 0xbae <vfprintf+0x3bc>
 bc2:	f6 01       	movw	r30, r12
 bc4:	86 81       	ldd	r24, Z+6	; 0x06
 bc6:	97 81       	ldd	r25, Z+7	; 0x07
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <vfprintf+0x3dc>
 bca:	8f ef       	ldi	r24, 0xFF	; 255
 bcc:	9f ef       	ldi	r25, 0xFF	; 255
 bce:	2b 96       	adiw	r28, 0x0b	; 11
 bd0:	cd bf       	out	0x3d, r28	; 61
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	df 91       	pop	r29
 bd6:	cf 91       	pop	r28
 bd8:	1f 91       	pop	r17
 bda:	0f 91       	pop	r16
 bdc:	ff 90       	pop	r15
 bde:	ef 90       	pop	r14
 be0:	df 90       	pop	r13
 be2:	cf 90       	pop	r12
 be4:	bf 90       	pop	r11
 be6:	af 90       	pop	r10
 be8:	9f 90       	pop	r9
 bea:	8f 90       	pop	r8
 bec:	7f 90       	pop	r7
 bee:	6f 90       	pop	r6
 bf0:	5f 90       	pop	r5
 bf2:	4f 90       	pop	r4
 bf4:	3f 90       	pop	r3
 bf6:	2f 90       	pop	r2
 bf8:	08 95       	ret

00000bfa <strnlen_P>:
 bfa:	fc 01       	movw	r30, r24
 bfc:	05 90       	lpm	r0, Z+
 bfe:	61 50       	subi	r22, 0x01	; 1
 c00:	70 40       	sbci	r23, 0x00	; 0
 c02:	01 10       	cpse	r0, r1
 c04:	d8 f7       	brcc	.-10     	; 0xbfc <strnlen_P+0x2>
 c06:	80 95       	com	r24
 c08:	90 95       	com	r25
 c0a:	8e 0f       	add	r24, r30
 c0c:	9f 1f       	adc	r25, r31
 c0e:	08 95       	ret

00000c10 <strnlen>:
 c10:	fc 01       	movw	r30, r24
 c12:	61 50       	subi	r22, 0x01	; 1
 c14:	70 40       	sbci	r23, 0x00	; 0
 c16:	01 90       	ld	r0, Z+
 c18:	01 10       	cpse	r0, r1
 c1a:	d8 f7       	brcc	.-10     	; 0xc12 <strnlen+0x2>
 c1c:	80 95       	com	r24
 c1e:	90 95       	com	r25
 c20:	8e 0f       	add	r24, r30
 c22:	9f 1f       	adc	r25, r31
 c24:	08 95       	ret

00000c26 <fputc>:
 c26:	0f 93       	push	r16
 c28:	1f 93       	push	r17
 c2a:	cf 93       	push	r28
 c2c:	df 93       	push	r29
 c2e:	fb 01       	movw	r30, r22
 c30:	23 81       	ldd	r18, Z+3	; 0x03
 c32:	21 fd       	sbrc	r18, 1
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <fputc+0x16>
 c36:	8f ef       	ldi	r24, 0xFF	; 255
 c38:	9f ef       	ldi	r25, 0xFF	; 255
 c3a:	2c c0       	rjmp	.+88     	; 0xc94 <fputc+0x6e>
 c3c:	22 ff       	sbrs	r18, 2
 c3e:	16 c0       	rjmp	.+44     	; 0xc6c <fputc+0x46>
 c40:	46 81       	ldd	r20, Z+6	; 0x06
 c42:	57 81       	ldd	r21, Z+7	; 0x07
 c44:	24 81       	ldd	r18, Z+4	; 0x04
 c46:	35 81       	ldd	r19, Z+5	; 0x05
 c48:	42 17       	cp	r20, r18
 c4a:	53 07       	cpc	r21, r19
 c4c:	44 f4       	brge	.+16     	; 0xc5e <fputc+0x38>
 c4e:	a0 81       	ld	r26, Z
 c50:	b1 81       	ldd	r27, Z+1	; 0x01
 c52:	9d 01       	movw	r18, r26
 c54:	2f 5f       	subi	r18, 0xFF	; 255
 c56:	3f 4f       	sbci	r19, 0xFF	; 255
 c58:	20 83       	st	Z, r18
 c5a:	31 83       	std	Z+1, r19	; 0x01
 c5c:	8c 93       	st	X, r24
 c5e:	26 81       	ldd	r18, Z+6	; 0x06
 c60:	37 81       	ldd	r19, Z+7	; 0x07
 c62:	2f 5f       	subi	r18, 0xFF	; 255
 c64:	3f 4f       	sbci	r19, 0xFF	; 255
 c66:	26 83       	std	Z+6, r18	; 0x06
 c68:	37 83       	std	Z+7, r19	; 0x07
 c6a:	14 c0       	rjmp	.+40     	; 0xc94 <fputc+0x6e>
 c6c:	8b 01       	movw	r16, r22
 c6e:	ec 01       	movw	r28, r24
 c70:	fb 01       	movw	r30, r22
 c72:	00 84       	ldd	r0, Z+8	; 0x08
 c74:	f1 85       	ldd	r31, Z+9	; 0x09
 c76:	e0 2d       	mov	r30, r0
 c78:	09 95       	icall
 c7a:	89 2b       	or	r24, r25
 c7c:	e1 f6       	brne	.-72     	; 0xc36 <fputc+0x10>
 c7e:	d8 01       	movw	r26, r16
 c80:	16 96       	adiw	r26, 0x06	; 6
 c82:	8d 91       	ld	r24, X+
 c84:	9c 91       	ld	r25, X
 c86:	17 97       	sbiw	r26, 0x07	; 7
 c88:	01 96       	adiw	r24, 0x01	; 1
 c8a:	16 96       	adiw	r26, 0x06	; 6
 c8c:	8d 93       	st	X+, r24
 c8e:	9c 93       	st	X, r25
 c90:	17 97       	sbiw	r26, 0x07	; 7
 c92:	ce 01       	movw	r24, r28
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	1f 91       	pop	r17
 c9a:	0f 91       	pop	r16
 c9c:	08 95       	ret

00000c9e <__ultoa_invert>:
 c9e:	fa 01       	movw	r30, r20
 ca0:	aa 27       	eor	r26, r26
 ca2:	28 30       	cpi	r18, 0x08	; 8
 ca4:	51 f1       	breq	.+84     	; 0xcfa <__ultoa_invert+0x5c>
 ca6:	20 31       	cpi	r18, 0x10	; 16
 ca8:	81 f1       	breq	.+96     	; 0xd0a <__ultoa_invert+0x6c>
 caa:	e8 94       	clt
 cac:	6f 93       	push	r22
 cae:	6e 7f       	andi	r22, 0xFE	; 254
 cb0:	6e 5f       	subi	r22, 0xFE	; 254
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255
 cb4:	8f 4f       	sbci	r24, 0xFF	; 255
 cb6:	9f 4f       	sbci	r25, 0xFF	; 255
 cb8:	af 4f       	sbci	r26, 0xFF	; 255
 cba:	b1 e0       	ldi	r27, 0x01	; 1
 cbc:	3e d0       	rcall	.+124    	; 0xd3a <__ultoa_invert+0x9c>
 cbe:	b4 e0       	ldi	r27, 0x04	; 4
 cc0:	3c d0       	rcall	.+120    	; 0xd3a <__ultoa_invert+0x9c>
 cc2:	67 0f       	add	r22, r23
 cc4:	78 1f       	adc	r23, r24
 cc6:	89 1f       	adc	r24, r25
 cc8:	9a 1f       	adc	r25, r26
 cca:	a1 1d       	adc	r26, r1
 ccc:	68 0f       	add	r22, r24
 cce:	79 1f       	adc	r23, r25
 cd0:	8a 1f       	adc	r24, r26
 cd2:	91 1d       	adc	r25, r1
 cd4:	a1 1d       	adc	r26, r1
 cd6:	6a 0f       	add	r22, r26
 cd8:	71 1d       	adc	r23, r1
 cda:	81 1d       	adc	r24, r1
 cdc:	91 1d       	adc	r25, r1
 cde:	a1 1d       	adc	r26, r1
 ce0:	20 d0       	rcall	.+64     	; 0xd22 <__ultoa_invert+0x84>
 ce2:	09 f4       	brne	.+2      	; 0xce6 <__ultoa_invert+0x48>
 ce4:	68 94       	set
 ce6:	3f 91       	pop	r19
 ce8:	2a e0       	ldi	r18, 0x0A	; 10
 cea:	26 9f       	mul	r18, r22
 cec:	11 24       	eor	r1, r1
 cee:	30 19       	sub	r19, r0
 cf0:	30 5d       	subi	r19, 0xD0	; 208
 cf2:	31 93       	st	Z+, r19
 cf4:	de f6       	brtc	.-74     	; 0xcac <__ultoa_invert+0xe>
 cf6:	cf 01       	movw	r24, r30
 cf8:	08 95       	ret
 cfa:	46 2f       	mov	r20, r22
 cfc:	47 70       	andi	r20, 0x07	; 7
 cfe:	40 5d       	subi	r20, 0xD0	; 208
 d00:	41 93       	st	Z+, r20
 d02:	b3 e0       	ldi	r27, 0x03	; 3
 d04:	0f d0       	rcall	.+30     	; 0xd24 <__ultoa_invert+0x86>
 d06:	c9 f7       	brne	.-14     	; 0xcfa <__ultoa_invert+0x5c>
 d08:	f6 cf       	rjmp	.-20     	; 0xcf6 <__ultoa_invert+0x58>
 d0a:	46 2f       	mov	r20, r22
 d0c:	4f 70       	andi	r20, 0x0F	; 15
 d0e:	40 5d       	subi	r20, 0xD0	; 208
 d10:	4a 33       	cpi	r20, 0x3A	; 58
 d12:	18 f0       	brcs	.+6      	; 0xd1a <__ultoa_invert+0x7c>
 d14:	49 5d       	subi	r20, 0xD9	; 217
 d16:	31 fd       	sbrc	r19, 1
 d18:	40 52       	subi	r20, 0x20	; 32
 d1a:	41 93       	st	Z+, r20
 d1c:	02 d0       	rcall	.+4      	; 0xd22 <__ultoa_invert+0x84>
 d1e:	a9 f7       	brne	.-22     	; 0xd0a <__ultoa_invert+0x6c>
 d20:	ea cf       	rjmp	.-44     	; 0xcf6 <__ultoa_invert+0x58>
 d22:	b4 e0       	ldi	r27, 0x04	; 4
 d24:	a6 95       	lsr	r26
 d26:	97 95       	ror	r25
 d28:	87 95       	ror	r24
 d2a:	77 95       	ror	r23
 d2c:	67 95       	ror	r22
 d2e:	ba 95       	dec	r27
 d30:	c9 f7       	brne	.-14     	; 0xd24 <__ultoa_invert+0x86>
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	61 05       	cpc	r22, r1
 d36:	71 05       	cpc	r23, r1
 d38:	08 95       	ret
 d3a:	9b 01       	movw	r18, r22
 d3c:	ac 01       	movw	r20, r24
 d3e:	0a 2e       	mov	r0, r26
 d40:	06 94       	lsr	r0
 d42:	57 95       	ror	r21
 d44:	47 95       	ror	r20
 d46:	37 95       	ror	r19
 d48:	27 95       	ror	r18
 d4a:	ba 95       	dec	r27
 d4c:	c9 f7       	brne	.-14     	; 0xd40 <__ultoa_invert+0xa2>
 d4e:	62 0f       	add	r22, r18
 d50:	73 1f       	adc	r23, r19
 d52:	84 1f       	adc	r24, r20
 d54:	95 1f       	adc	r25, r21
 d56:	a0 1d       	adc	r26, r0
 d58:	08 95       	ret

00000d5a <_exit>:
 d5a:	f8 94       	cli

00000d5c <__stop_program>:
 d5c:	ff cf       	rjmp	.-2      	; 0xd5c <__stop_program>
